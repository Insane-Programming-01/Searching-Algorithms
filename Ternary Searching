# TERNARY SEARCHING ALGORITHM

# Definition -  

# It is similar to binary search where we divide the array into two parts but in this algorithm, 
# we divide the given array into three parts and determine which has the key (searched element). 

# Example Array -

[ 12, 34, 45, 56, 67, 78, 89, 99, 101 ]

# Algorithm - 

# 1. First, we compare the key with the element at mid1. If found equal, we return mid1.
# 2. If not, then we compare the key with the element at mid2. If found equal, we return mid2.
# 3. If not, then we check whether the key is less than the element at mid1. If yes, then recur to the first part.
# 4. If not, then we check whether the key is greater than the element at mid2. If yes, then recur to the third part.
# 5. If not, then we recur to the second (middle) part.

# Formulas - 

# mid 1 = low + (high - low) // 3
# mid 2 = high - (high - low) // 3

def ternarySearch(low, high, key, arr):

    if low <= high:
        
        mid1 = low + (high - low) // 3
        mid2 = high - (high - low) // 3

        if key == arr[mid1]:
            return mid1
        
        if key == arr[mid2]:
            return mid2 
        
        if key < arr[mid1]:
            return ternarySearch(low, mid1-1, key, arr)
        
        elif key > arr[mid2]:
            return ternarySearch(mid2+1, high, key, arr)
        
        else:
            return ternarySearch(mid1+1, mid2-1, key, arr)
    
    return -1

arr = [ 12, 34, 45, 56, 67, 78, 89, 99, 101 ]
low = 0
high = len(arr) - 1
key = 564563

print(f"Element Found At {ternarySearch(low, high, key, arr)}")


